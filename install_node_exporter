#!/bin/bash
set -e
set -o pipefail
set -x  # 开启调试模式，输出执行过程

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# 检查是否以 root 身份运行
if [[ $EUID -ne 0 ]]; then
  echo -e "${RED}请使用 root 权限运行此脚本！${NC}"
  exit 1
fi

# 定义变量
NODE_EXPORTER_VERSION="1.3.1"
NODE_EXPORTER_BIN="/usr/local/bin/node_exporter"
SERVICE_FILE="/etc/systemd/system/node_exporter.service"
MONITOR_IP=""
FIREWALL_CONFIG_FILE=""

# 日志文件
LOG_FILE="/var/log/node_exporter_install.log"

# 日志记录函数
log_info() {
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') ${GREEN}[INFO]${NC} $1" | tee -a "$LOG_FILE"
}

log_warn() {
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') ${YELLOW}[WARN]${NC} $1" | tee -a "$LOG_FILE"
}

log_error() {
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') ${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
}

# 依赖检查函数
check_command() {
  if ! command -v "$1" >/dev/null 2>&1; then
    log_error "缺少依赖：$1，请先安装 $1。"
    exit 1
  fi
}

# 检查必要命令
check_command wget
check_command tar
check_command iptables
check_command systemctl

# 获取操作系统发行版信息，并设置防火墙配置文件路径
get_os_info() {
  if command -v apt-get >/dev/null 2>&1; then
    OS_DISTRIBUTION="debian"
    FIREWALL_CONFIG_FILE="/etc/iptables/rules.v4"  # Debian/Ubuntu
  elif command -v yum >/dev/null 2>&1 || command -v dnf >/dev/null 2>&1; then
    OS_DISTRIBUTION="redhat"
    FIREWALL_CONFIG_FILE="/etc/sysconfig/iptables"  # CentOS/RHEL
  else
    OS_DISTRIBUTION="unknown"
    log_warn "无法检测到操作系统发行版，防火墙持久化可能无法配置。"
  fi
}

# 备份防火墙规则（仅针对 iptables 配置文件）
backup_firewall_rules() {
  if [[ -n "$FIREWALL_CONFIG_FILE" && -f "$FIREWALL_CONFIG_FILE" ]]; then
    cp "$FIREWALL_CONFIG_FILE" "${FIREWALL_CONFIG_FILE}.bak"
    log_info "已备份当前防火墙规则到 ${FIREWALL_CONFIG_FILE}.bak"
  fi
}

# 持久化防火墙规则函数，支持 firewalld 与 iptables
persist_firewall_rules() {
  get_os_info
  log_info "正在持久化防火墙规则..."
  if systemctl is-active --quiet firewalld; then
    if [[ -n "$MONITOR_IP" ]]; then
      firewall-cmd --permanent --add-rich-rule="rule family='ipv4' source address='$MONITOR_IP' port port='9100' protocol='tcp' accept"
    fi
    firewall-cmd --reload
  elif [[ "$OS_DISTRIBUTION" == "debian" ]]; then
    # 设置非交互模式并预设答案，防止进入配置界面
    export DEBIAN_FRONTEND=noninteractive
    echo "iptables-persistent iptables-persistent/autosave_v4 boolean true" | debconf-set-selections
    echo "iptables-persistent iptables-persistent/autosave_v6 boolean true" | debconf-set-selections
    apt-get update
    apt-get install -y iptables-persistent
    netfilter-persistent save
  elif [[ "$OS_DISTRIBUTION" == "redhat" ]]; then
    yum install -y iptables-services || dnf install -y iptables-services
    iptables-save > "$FIREWALL_CONFIG_FILE"
    systemctl enable iptables || true
    systemctl enable iptables.service || true
  else
    log_warn "未知的操作系统，无法自动持久化防火墙规则，请手动保存。"
    log_warn "请参考您的系统文档，手动保存 iptables 规则。"
  fi
  log_info "防火墙规则持久化完成！"
}

# 卸载防火墙规则函数，恢复备份（如果存在）
uninstall_firewall_rules() {
  log_warn "正在撤销防火墙规则..."
  if [[ -n "$MONITOR_IP" ]]; then
    iptables -D INPUT -p tcp --dport 9100 -s "$MONITOR_IP" -j ACCEPT || true
  fi
  iptables -D INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT || true

  if [[ -f "${FIREWALL_CONFIG_FILE}.bak" ]]; then
    cp "${FIREWALL_CONFIG_FILE}.bak" "$FIREWALL_CONFIG_FILE"
    log_info "防火墙规则已恢复备份。"
    if systemctl is-active --quiet firewalld; then
      firewall-cmd --reload
    else
      persist_firewall_rules
    fi
  else
    log_warn "未找到防火墙规则备份，请手动检查。"
  fi
}

# 卸载 Node Exporter 函数
uninstall_node_exporter() {
  log_warn "正在卸载 Node Exporter..."
  systemctl stop node_exporter || true
  systemctl disable node_exporter || true
  rm -f "$NODE_EXPORTER_BIN"
  rm -f "$SERVICE_FILE"
  uninstall_firewall_rules
  systemctl daemon-reload
  log_info "Node Exporter 已成功卸载！"
  exit 0
}

# 检测是否已安装 Node Exporter，若已安装提示是否卸载
if pgrep -x "node_exporter" >/dev/null 2>&1; then
  log_warn "检测到 Node Exporter 已安装！"
  read -p "是否要卸载？(y/N): " REMOVE
  if [[ "$REMOVE" =~ ^[Yy]$ ]]; then
    uninstall_node_exporter
  else
    log_info "跳过卸载，脚本退出。"
    exit 0
  fi
fi

# 获取监控服务器 IP（支持非交互模式可通过 MONITOR_IP 环境变量传入）
if [[ -z "$MONITOR_IP" ]]; then
  read -p "请输入 Prometheus 监控服务器的 IP: " MONITOR_IP
fi

if [[ -z "$MONITOR_IP" ]]; then
  log_error "IP 不能为空！"
  exit 1
fi

# 备份防火墙规则
backup_firewall_rules

# 下载并安装 Node Exporter（可增加校验步骤）
log_info "正在安装 Node Exporter v$NODE_EXPORTER_VERSION..."
DOWNLOAD_URL="https://github.com/prometheus/node_exporter/releases/download/v$NODE_EXPORTER_VERSION/node_exporter-$NODE_EXPORTER_VERSION.linux-amd64.tar.gz"
wget -qO- "$DOWNLOAD_URL" | tar xz

# 检查解压是否成功
if [ ! -f "node_exporter-$NODE_EXPORTER_VERSION.linux-amd64/node_exporter" ]; then
  log_error "下载或解压失败，请检查网络连接或下载链接。"
  exit 1
fi

mv "node_exporter-$NODE_EXPORTER_VERSION.linux-amd64/node_exporter" "$NODE_EXPORTER_BIN"
rm -rf "node_exporter-$NODE_EXPORTER_VERSION.linux-amd64"

# 创建 systemd 服务文件
log_info "配置 systemd 服务..."
cat <<EOF | tee "$SERVICE_FILE"
[Unit]
Description=Prometheus Node Exporter
After=network.target

[Service]
User=nobody
ExecStart=$NODE_EXPORTER_BIN
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# 重新加载 systemd 并启动服务
systemctl daemon-reload
systemctl enable node_exporter
systemctl start node_exporter

# 配置防火墙规则
log_info "正在配置防火墙规则..."
if systemctl is-active --quiet firewalld; then
  firewall-cmd --permanent --add-rich-rule="rule family='ipv4' source address='$MONITOR_IP' port port='9100' protocol='tcp' accept"
  firewall-cmd --reload
else
  iptables -A INPUT -p tcp --dport 9100 -s "$MONITOR_IP" -j ACCEPT
  iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
fi
log_info "防火墙规则已应用！"

persist_firewall_rules

# 检查 Node Exporter 是否运行成功
if pgrep -x "node_exporter" >/dev/null 2>&1; then
  log_info "Node Exporter 安装并运行成功！"
  echo -e "你可以在 Prometheus 配置中添加："
  echo -e "${YELLOW}  - targets: [\"$HOSTNAME:9100\"]${NC}"
else
  log_error "Node Exporter 运行失败，请检查日志！"
  journalctl -u node_exporter --no-pager --lines=20
  exit 1
fi
