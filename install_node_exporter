#!/bin/bash

set -e
set -o pipefail

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# 检查是否以 root 身份运行
if [[ $EUID -ne 0 ]]; then
  echo -e "${RED}请使用 root 权限运行此脚本！${NC}"
  exit 1
fi

# 定义变量
NODE_EXPORTER_VERSION="1.3.1"
NODE_EXPORTER_BIN="/usr/local/bin/node_exporter"
SERVICE_FILE="/etc/systemd/system/node_exporter.service"
MONITOR_IP=""
FIREWALL_RULES_FILE="/root/node_exporter_firewall_rules.txt"
LOG_FILE="/var/log/node_exporter_install.log"

# 日志记录函数
log_info() {
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') ${GREEN}[INFO]${NC} $1" | tee -a "$LOG_FILE"
}

log_warn() {
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') ${YELLOW}[WARN]${NC} $1" | tee -a "$LOG_FILE"
}

log_error() {
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') ${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
}

# 依赖检查函数
check_command() {
  if ! command -v "$1" >/dev/null 2>&1; then
    log_error "缺少依赖：$1，请先安装 $1。"
    exit 1
  fi
}

# 检查必要命令
check_command wget
check_command tar
check_command iptables
check_command systemctl

# 获取操作系统发行版信息
get_os_info() {
  if command -v apt-get >/dev/null 2>&1; then
    OS_DISTRIBUTION="debian"
  elif command -v yum >/dev/null 2>&1 || command -v dnf >/dev/null 2>&1; then
    OS_DISTRIBUTION="redhat"
  else
    OS_DISTRIBUTION="unknown"
    log_warn "无法检测到操作系统发行版，防火墙持久化可能无法配置。"
  fi
}


# 添加防火墙规则并记录（firewalld 和 iptables分开处理）
add_firewall_rule() {
  local rule_type="$1"  # "iptables" 或 "firewalld"
  shift # 第一个参数移除，剩下的都是规则参数

  log_info "添加防火墙规则: $rule_type - $@"

  if [[ "$rule_type" == "firewalld" ]]; then
    firewall-cmd --permanent "$@"  # 直接传入完整的 firewalld 命令
    firewall-cmd --reload
    echo "firewalld --permanent $@" >> "$FIREWALL_RULES_FILE"

  elif [[ "$rule_type" == "iptables" ]] && [[ "$OS_DISTRIBUTION" == "debian" || "$OS_DISTRIBUTION" == "redhat" ]] ; then
    iptables "$@" # 后面参数全部传入
    echo "iptables $@" >> "$FIREWALL_RULES_FILE" #记录

  else
    log_warn "未知的操作系统或防火墙,无法自动添加规则，请手动添加."
    echo "$@" >> "$FIREWALL_RULES_FILE" # 依然写入文件
  fi
}


# 持久化防火墙规则函数，支持 firewalld 与 iptables
persist_firewall_rules() {
  get_os_info
  log_info "正在持久化防火墙规则..."
  if systemctl is-active --quiet firewalld; then
    firewall-cmd --reload  # firewalld 通过 --permanent 已经持久化

  elif [[ "$OS_DISTRIBUTION" == "debian" ]]; then
    export DEBIAN_FRONTEND=noninteractive
    echo "iptables-persistent iptables-persistent/autosave_v4 boolean true" | debconf-set-selections
    echo "iptables-persistent iptables-persistent/autosave_v6 boolean true" | debconf-set-selections
    apt-get update -y
    apt-get install -y iptables-persistent
    netfilter-persistent save
  elif [[ "$OS_DISTRIBUTION" == "redhat" ]]; then
    yum install -y iptables-services || dnf install -y iptables-services
    iptables-save > /etc/sysconfig/iptables #centos iptables 规则
    systemctl enable iptables || true
    systemctl enable iptables.service || true  # 兼容不同版本
  else
    log_warn "未知的操作系统，无法自动持久化防火墙规则，请手动保存。"
  fi
  log_info "防火墙规则持久化完成！"
}


# 卸载防火墙规则（直接执行记录的命令的删除版本）
uninstall_firewall_rules() {
  log_warn "正在撤销防火墙规则..."

  if [[ -f "$FIREWALL_RULES_FILE" ]]; then
    while IFS= read -r rule; do
      log_info "删除防火墙规则: $rule"
      if [[ "$rule" == firewalld* ]]; then
        # firewalld 规则处理
        # 把 --permanent 替换成 --remove
        delete_rule=$(echo "$rule" | sed 's/--permanent/--remove/')
        $delete_rule 2>/dev/null || true

      elif [[ "$rule" == iptables* ]]; then
          # iptables 规则：将 -A 替换为 -D
          delete_rule=$(echo "$rule" | sed 's/iptables -A/iptables -D/')
          $delete_rule 2>/dev/null || true
      fi
    done < "$FIREWALL_RULES_FILE"
    rm -f "$FIREWALL_RULES_FILE"
    if systemctl is-active --quiet firewalld; then
        firewall-cmd --reload
    fi
  else
    log_warn "未找到防火墙规则记录文件，跳过删除。"
  fi
}

# 卸载 Node Exporter 函数
uninstall_node_exporter() {
  log_warn "正在卸载 Node Exporter..."
  systemctl stop node_exporter || true
  systemctl disable node_exporter || true
  rm -f "$NODE_EXPORTER_BIN"
  rm -f "$SERVICE_FILE"
  systemctl daemon-reload
  uninstall_firewall_rules
  log_info "Node Exporter 已成功卸载！"
  exit 0
}

# 检测是否已安装 Node Exporter
if pgrep -x "node_exporter" >/dev/null 2>&1; then
  log_warn "检测到 Node Exporter 已安装！"
  read -p "是否要卸载？(y/N): " REMOVE
  if [[ "$REMOVE" =~ ^[Yy]$ ]]; then
    uninstall_node_exporter
  else
    log_info "跳过卸载，脚本退出。"
    exit 0
  fi
fi

# 获取监控服务器 IP
if [[ -z "$MONITOR_IP" ]]; then
  read -p "请输入 Prometheus 监控服务器的 IP: " MONITOR_IP
fi

if [[ -z "$MONITOR_IP" ]]; then
  log_error "IP 不能为空！"
  exit 1
fi

# 下载并安装 Node Exporter
log_info "正在安装 Node Exporter v$NODE_EXPORTER_VERSION..."
DOWNLOAD_URL="https://github.com/prometheus/node_exporter/releases/download/v$NODE_EXPORTER_VERSION/node_exporter-$NODE_EXPORTER_VERSION.linux-amd64.tar.gz"
wget -qO- "$DOWNLOAD_URL" | tar xz

# 检查解压
if [ ! -f "node_exporter-$NODE_EXPORTER_VERSION.linux-amd64/node_exporter" ]; then
  log_error "下载或解压失败。"
  exit 1
fi

mv "node_exporter-$NODE_EXPORTER_VERSION.linux-amd64/node_exporter" "$NODE_EXPORTER_BIN"
rm -rf "node_exporter-$NODE_EXPORTER_VERSION.linux-amd64"

# 创建 systemd 服务文件
log_info "配置 systemd 服务..."
cat <<EOF | tee "$SERVICE_FILE"
[Unit]
Description=Prometheus Node Exporter
After=network.target

[Service]
User=nobody
ExecStart=$NODE_EXPORTER_BIN
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# systemd
systemctl daemon-reload
systemctl enable node_exporter
systemctl start node_exporter

get_os_info #获取系统信息

# 配置防火墙规则
if systemctl is-active --quiet firewalld; then
  add_firewall_rule "firewalld" "--add-rich-rule='rule family=\"ipv4\" source address=\"127.0.0.1\" port port=\"9100\" protocol=\"tcp\" accept'"
  add_firewall_rule "firewalld" "--add-rich-rule='rule family=\"ipv4\" source address=\"$MONITOR_IP\" port port=\"9100\" protocol=\"tcp\" accept'"
else
  add_firewall_rule "iptables" -A INPUT -p tcp --dport 9100 -s 127.0.0.1 -j ACCEPT
  add_firewall_rule "iptables" -A INPUT -p tcp --dport 9100 -s "$MONITOR_IP" -j ACCEPT
  add_firewall_rule "iptables" -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
  add_firewall_rule "iptables" -A INPUT -p tcp --dport 9100 -j REJECT
fi

# 持久化防火墙规则
persist_firewall_rules

# 检查运行状态
if pgrep -x "node_exporter" >/dev/null 2>&1; then
  log_info "Node Exporter 安装并运行成功！"
else
  log_error "Node Exporter 运行失败，请检查日志！"
  journalctl -u node_exporter --no-pager --lines=20
  exit 1
fi
